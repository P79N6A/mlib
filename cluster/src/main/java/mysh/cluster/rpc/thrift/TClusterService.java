/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mysh.cluster.rpc.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-11-30")
public class TClusterService {

  public interface Iface {

    public java.nio.ByteBuffer invokeSvMethod(java.lang.String ns, java.lang.String method, java.nio.ByteBuffer params) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void invokeSvMethod(java.lang.String ns, java.lang.String method, java.nio.ByteBuffer params, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.nio.ByteBuffer invokeSvMethod(java.lang.String ns, java.lang.String method, java.nio.ByteBuffer params) throws org.apache.thrift.TException
    {
      send_invokeSvMethod(ns, method, params);
      return recv_invokeSvMethod();
    }

    public void send_invokeSvMethod(java.lang.String ns, java.lang.String method, java.nio.ByteBuffer params) throws org.apache.thrift.TException
    {
      invokeSvMethod_args args = new invokeSvMethod_args();
      args.setNs(ns);
      args.setMethod(method);
      args.setParams(params);
      sendBase("invokeSvMethod", args);
    }

    public java.nio.ByteBuffer recv_invokeSvMethod() throws org.apache.thrift.TException
    {
      invokeSvMethod_result result = new invokeSvMethod_result();
      receiveBase(result, "invokeSvMethod");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "invokeSvMethod failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void invokeSvMethod(java.lang.String ns, java.lang.String method, java.nio.ByteBuffer params, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      invokeSvMethod_call method_call = new invokeSvMethod_call(ns, method, params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class invokeSvMethod_call extends org.apache.thrift.async.TAsyncMethodCall<java.nio.ByteBuffer> {
      private java.lang.String ns;
      private java.lang.String method;
      private java.nio.ByteBuffer params;
      public invokeSvMethod_call(java.lang.String ns, java.lang.String method, java.nio.ByteBuffer params, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.method = method;
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("invokeSvMethod", org.apache.thrift.protocol.TMessageType.CALL, 0));
        invokeSvMethod_args args = new invokeSvMethod_args();
        args.setNs(ns);
        args.setMethod(method);
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.nio.ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_invokeSvMethod();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("invokeSvMethod", new invokeSvMethod());
      return processMap;
    }

    public static class invokeSvMethod<I extends Iface> extends org.apache.thrift.ProcessFunction<I, invokeSvMethod_args> {
      public invokeSvMethod() {
        super("invokeSvMethod");
      }

      public invokeSvMethod_args getEmptyArgsInstance() {
        return new invokeSvMethod_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public invokeSvMethod_result getResult(I iface, invokeSvMethod_args args) throws org.apache.thrift.TException {
        invokeSvMethod_result result = new invokeSvMethod_result();
        result.success = iface.invokeSvMethod(args.ns, args.method, args.params);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("invokeSvMethod", new invokeSvMethod());
      return processMap;
    }

    public static class invokeSvMethod<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, invokeSvMethod_args, java.nio.ByteBuffer> {
      public invokeSvMethod() {
        super("invokeSvMethod");
      }

      public invokeSvMethod_args getEmptyArgsInstance() {
        return new invokeSvMethod_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer>() { 
          public void onComplete(java.nio.ByteBuffer o) {
            invokeSvMethod_result result = new invokeSvMethod_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            invokeSvMethod_result result = new invokeSvMethod_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, invokeSvMethod_args args, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
        iface.invokeSvMethod(args.ns, args.method, args.params,resultHandler);
      }
    }

  }

  public static class invokeSvMethod_args implements org.apache.thrift.TBase<invokeSvMethod_args, invokeSvMethod_args._Fields>, java.io.Serializable, Cloneable, Comparable<invokeSvMethod_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("invokeSvMethod_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("method", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new invokeSvMethod_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new invokeSvMethod_argsTupleSchemeFactory();

    private java.lang.String ns; // required
    private java.lang.String method; // required
    private java.nio.ByteBuffer params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      METHOD((short)2, "method"),
      PARAMS((short)3, "params");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // METHOD
            return METHOD;
          case 3: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.METHOD, new org.apache.thrift.meta_data.FieldMetaData("method", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(invokeSvMethod_args.class, metaDataMap);
    }

    public invokeSvMethod_args() {
    }

    public invokeSvMethod_args(
      java.lang.String ns,
      java.lang.String method,
      java.nio.ByteBuffer params)
    {
      this();
      this.ns = ns;
      this.method = method;
      this.params = org.apache.thrift.TBaseHelper.copyBinary(params);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public invokeSvMethod_args(invokeSvMethod_args other) {
      if (other.isSetNs()) {
        this.ns = other.ns;
      }
      if (other.isSetMethod()) {
        this.method = other.method;
      }
      if (other.isSetParams()) {
        this.params = org.apache.thrift.TBaseHelper.copyBinary(other.params);
      }
    }

    public invokeSvMethod_args deepCopy() {
      return new invokeSvMethod_args(this);
    }

    public void clear() {
      this.ns = null;
      this.method = null;
      this.params = null;
    }

    public java.lang.String getNs() {
      return this.ns;
    }

    public invokeSvMethod_args setNs(java.lang.String ns) {
      this.ns = ns;
      return this;
    }

    public void unsetNs() {
      this.ns = null;
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return this.ns != null;
    }

    public void setNsIsSet(boolean value) {
      if (!value) {
        this.ns = null;
      }
    }

    public java.lang.String getMethod() {
      return this.method;
    }

    public invokeSvMethod_args setMethod(java.lang.String method) {
      this.method = method;
      return this;
    }

    public void unsetMethod() {
      this.method = null;
    }

    /** Returns true if field method is set (has been assigned a value) and false otherwise */
    public boolean isSetMethod() {
      return this.method != null;
    }

    public void setMethodIsSet(boolean value) {
      if (!value) {
        this.method = null;
      }
    }

    public byte[] getParams() {
      setParams(org.apache.thrift.TBaseHelper.rightSize(params));
      return params == null ? null : params.array();
    }

    public java.nio.ByteBuffer bufferForParams() {
      return org.apache.thrift.TBaseHelper.copyBinary(params);
    }

    public invokeSvMethod_args setParams(byte[] params) {
      this.params = params == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(params.clone());
      return this;
    }

    public invokeSvMethod_args setParams(java.nio.ByteBuffer params) {
      this.params = org.apache.thrift.TBaseHelper.copyBinary(params);
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((java.lang.String)value);
        }
        break;

      case METHOD:
        if (value == null) {
          unsetMethod();
        } else {
          setMethod((java.lang.String)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          if (value instanceof byte[]) {
            setParams((byte[])value);
          } else {
            setParams((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return getNs();

      case METHOD:
        return getMethod();

      case PARAMS:
        return getParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case METHOD:
        return isSetMethod();
      case PARAMS:
        return isSetParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof invokeSvMethod_args)
        return this.equals((invokeSvMethod_args)that);
      return false;
    }

    public boolean equals(invokeSvMethod_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ns = true && this.isSetNs();
      boolean that_present_ns = true && that.isSetNs();
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (!this.ns.equals(that.ns))
          return false;
      }

      boolean this_present_method = true && this.isSetMethod();
      boolean that_present_method = true && that.isSetMethod();
      if (this_present_method || that_present_method) {
        if (!(this_present_method && that_present_method))
          return false;
        if (!this.method.equals(that.method))
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNs()) ? 131071 : 524287);
      if (isSetNs())
        hashCode = hashCode * 8191 + ns.hashCode();

      hashCode = hashCode * 8191 + ((isSetMethod()) ? 131071 : 524287);
      if (isSetMethod())
        hashCode = hashCode * 8191 + method.hashCode();

      hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
      if (isSetParams())
        hashCode = hashCode * 8191 + params.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(invokeSvMethod_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNs()).compareTo(other.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, other.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMethod()).compareTo(other.isSetMethod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMethod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.method, other.method);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("invokeSvMethod_args(");
      boolean first = true;

      sb.append("ns:");
      if (this.ns == null) {
        sb.append("null");
      } else {
        sb.append(this.ns);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("method:");
      if (this.method == null) {
        sb.append("null");
      } else {
        sb.append(this.method);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.params, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class invokeSvMethod_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public invokeSvMethod_argsStandardScheme getScheme() {
        return new invokeSvMethod_argsStandardScheme();
      }
    }

    private static class invokeSvMethod_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<invokeSvMethod_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, invokeSvMethod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ns = iprot.readString();
                struct.setNsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // METHOD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.method = iprot.readString();
                struct.setMethodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.params = iprot.readBinary();
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, invokeSvMethod_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ns != null) {
          oprot.writeFieldBegin(NS_FIELD_DESC);
          oprot.writeString(struct.ns);
          oprot.writeFieldEnd();
        }
        if (struct.method != null) {
          oprot.writeFieldBegin(METHOD_FIELD_DESC);
          oprot.writeString(struct.method);
          oprot.writeFieldEnd();
        }
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          oprot.writeBinary(struct.params);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class invokeSvMethod_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public invokeSvMethod_argsTupleScheme getScheme() {
        return new invokeSvMethod_argsTupleScheme();
      }
    }

    private static class invokeSvMethod_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<invokeSvMethod_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, invokeSvMethod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNs()) {
          optionals.set(0);
        }
        if (struct.isSetMethod()) {
          optionals.set(1);
        }
        if (struct.isSetParams()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetNs()) {
          oprot.writeString(struct.ns);
        }
        if (struct.isSetMethod()) {
          oprot.writeString(struct.method);
        }
        if (struct.isSetParams()) {
          oprot.writeBinary(struct.params);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, invokeSvMethod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ns = iprot.readString();
          struct.setNsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.method = iprot.readString();
          struct.setMethodIsSet(true);
        }
        if (incoming.get(2)) {
          struct.params = iprot.readBinary();
          struct.setParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class invokeSvMethod_result implements org.apache.thrift.TBase<invokeSvMethod_result, invokeSvMethod_result._Fields>, java.io.Serializable, Cloneable, Comparable<invokeSvMethod_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("invokeSvMethod_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new invokeSvMethod_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new invokeSvMethod_resultTupleSchemeFactory();

    private java.nio.ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(invokeSvMethod_result.class, metaDataMap);
    }

    public invokeSvMethod_result() {
    }

    public invokeSvMethod_result(
      java.nio.ByteBuffer success)
    {
      this();
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public invokeSvMethod_result(invokeSvMethod_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
    }

    public invokeSvMethod_result deepCopy() {
      return new invokeSvMethod_result(this);
    }

    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public java.nio.ByteBuffer bufferForSuccess() {
      return org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public invokeSvMethod_result setSuccess(byte[] success) {
      this.success = success == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(success.clone());
      return this;
    }

    public invokeSvMethod_result setSuccess(java.nio.ByteBuffer success) {
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          if (value instanceof byte[]) {
            setSuccess((byte[])value);
          } else {
            setSuccess((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof invokeSvMethod_result)
        return this.equals((invokeSvMethod_result)that);
      return false;
    }

    public boolean equals(invokeSvMethod_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(invokeSvMethod_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("invokeSvMethod_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class invokeSvMethod_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public invokeSvMethod_resultStandardScheme getScheme() {
        return new invokeSvMethod_resultStandardScheme();
      }
    }

    private static class invokeSvMethod_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<invokeSvMethod_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, invokeSvMethod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, invokeSvMethod_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class invokeSvMethod_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public invokeSvMethod_resultTupleScheme getScheme() {
        return new invokeSvMethod_resultTupleScheme();
      }
    }

    private static class invokeSvMethod_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<invokeSvMethod_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, invokeSvMethod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, invokeSvMethod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
